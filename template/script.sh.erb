#!/usr/bin/env bash

<%-
  session_dir = session.staged_root
%>

# 06/08/2022 now we need to load StdEnv since it is no longer provided for interactive session
#            to prevent 'scp' or 'rsync get bogged down with tons of modules loaded
module load StdEnv

# Set the working directory to the staged_root for OOD
export WORKING_DIR="<%= session_dir %>"

# Get the path of the RStudio Server image from the module

module load <%= context.rstudio_server_version %>
export IMAGE_PATH="${EBROOTRSTUDIOMINSERVER}"

# clean up old local rstudio session files
rm -rf $HOME/ondemand/data/sys/dashboard/batch_connect/sys/ycrc_rstudio_server/output/*/rstudio/*

# check if it is an R conda environment 
r_module=<%= context.r_version %>
if [[ $r_module == "__conda__:"* ]]; then 
  module load miniconda
  conda activate $(echo $r_module|cut -d: -f2)
  export LD_LIBRARY_PATH=${CONDA_PREFIX}/lib:${CONDA_PREFIX}/lib/R/lib
else
  module load <%= context.r_version %>
  if [ "x${R_LIBS_USER}" == "x" ]; then
    # if $R_LIBS_USER is not set, point it to $HOME/project/R/${R_VERSION}
    R_VERSION=$(R --version|grep -oP  '(?<=R version )\d.\d+')
    echo $R_VERSION
    R_LIBS_USER=$HOME/project/R/${R_VERSION}
    export R_LIBS_USER
    [ ! -d ${R_LIBS_USER} ] && mkdir -p ${R_LIBS_USER}
  fi

fi
which R
export APPTAINERENV_R_HOME=$(which R)

# Update this symbolic link to point to the latest image
RSTUDIO_IMG="${IMAGE_PATH}/RStudio-Server.sif"

echo $RSTUDIO_IMG

#
# Start RStudio Server
#
# PAM auth helper used by RStudio
export RSTUDIO_AUTH="${WORKING_DIR}/bin/auth"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="${WORKING_DIR}/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="${WORKING_DIR}/rsession.log"
  exec &>>"\${RSESSION_LOG_FILE}"
  set  -x
  
  # Launch the original command
  echo "Launching rsession..."
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

<% if context.additional_modules != "" %>
module load <%= context.additional_modules %>
<% end %>

export RSTUDIO_HOME=${HOME}/ondemand/rstudio-server
[ ! -d ${RSTUDIO_HOME} ] && mkdir -p ${RSTUDIO_HOME}
# rsession doesn't share the same env as the outside script
export APPTAINERENV_PATH="${PATH}:/usr/lib/rstudio-server/bin" 
export APPTAINERENV_LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
export APPTAINERENV_TZ="US/Eastern"
export APPTAINERENV_MODULEPATH_ROOT="${MODULEPATH_ROOT}"
export APPTAINERENV_MODULEPATH="${MODULEPATH}"
export APPTAINERENV_LMOD_PKG="${LMOD_PKG}"
export APPTAINERENV_PKG_CONFIG_PATH="${PKG_CONFIG_PATH}"
export APPTAINERENV_LIBRARY_PATH="${LIBRARY_PATH}"
export APPTAINERENV_R_LIBS_USER="${R_LIBS_USER}"
export APPTAINERENV_SLURM_HINT="${SLURM_HINT}"
# For Seurat
[ -v R_LIBS_SITE ] && export APPTAINERENV_R_LIBS_SITE="${R_LIBS_SITE}"
[ -v R_MAKEVARS_SITE ] && export APPTAINERENV_R_MAKEVARS_SITE="${R_MAKEVARS_SITE}"
# For reticulate
[ -v PYTHONPATH ] && export APPTAINERENV_R_PYTHONPATH="${PYTHONPATH}"
# For Knitro
[ -v ZIENA_LICENSE_NETWORK_ADDR ] && export APPTAINERENV_ZIENA_LICENSE_NETWORK_ADDR="${ZIENA_LICENSE_NETWORK_ADDR}"
[ -v KNITRODIR ] && export APPTAINERENV_KNITRODIR="${KNITRODIR}"

# get the job working dir
export MY_RENVIRON=${WORKING_DIR}/.Renviron
export MY_RSTUDIO_DIR=${WORKING_DIR}/rstudio
[ ! -f {$MY_RENVIRON} ] && touch ${MY_RENVIRON}
[ ! -d ${MY_RSTUDIO_DIR} ] && mkdir -p ${MY_RSTUDIO_DIR}

# process user defined environment variables
tmp_renviron=$HOME/ondemand/renviron
<% 
if context.user_defined_envs != ""
  renviron = File.new(ENV["HOME"]+"/ondemand/renviron", "w") 
  renviron.write(context.user_defined_envs)
  renviron.close
end 
%>

# append user defined renvrionment variables
[ -f $tmp_renviron ] && cat $tmp_renviron >> $MY_RENVIRON && rm $tmp_renviron

# Set working directory to home directory
cd "${HOME}"

# Launch the RStudio Server
echo "Starting up rserver..."
set -x

apptainer exec -B ${RSTUDIO_HOME}:/var/lib/rstudio-server \
  -B /run/dbus:/run/dbus \
  -B ${MY_ENVIRON}:${HOME}/.Renviron \
  -B /nfs:/nfs            \
  -B /apps:/apps          \
  <% if context.saved_r == "0" %>  -B ${MY_RSTUDIO_DIR}:${HOME}/.local/share/rstudio \
  -B ${WORKING_DIR}/.Rhistory:$HOME/.Rhistory \
  <% end %>\
  ${RSTUDIO_IMG} rserver \
  --server-working-dir=$RSTUDIO_HOME \
  --server-pid-file=$RSTUDIO_HOME/rstudio-server.pid \
  --server-data-dir=$RSTUDIO_HOME --server-user=$(whoami) \
  --secure-cookie-key-file=$RSTUDIO_HOME/secure-cookie-key \
  --www-port ${port} \
  --auth-none 0 \
  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 \
  --rsession-path "${RSESSION_WRAPPER_FILE}"
